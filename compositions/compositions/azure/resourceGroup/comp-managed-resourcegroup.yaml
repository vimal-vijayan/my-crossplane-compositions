apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: managed-resourcegroup
spec:
  compositeTypeRef:
    apiVersion: platform.essity/v1alpha1
    kind: ManagedResourceGroup
  mode: Pipeline
  pipeline:
    - step: create-resource-groups
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        inline:
          template: |
            apiVersion: azure.upbound.io/v1beta1
            kind: ResourceGroup
            metadata:
              name: "rg-{{ .observed.composite.resource.spec.name }}-{{ .observed.composite.resource.spec.region }}"
            spec:
              providerConfigRef:
                name: {{ .observed.composite.resource.spec.providerConfigRef.name | default "default" }}
                labels:
                  ${{ - range $key, $value := .observed.composite.resource.metadata.labels }}
                  {{ $key }}: "{{ $value }}"
                  ${{- end }}
              forProvider:
                location: {{ .observed.composite.resource.spec.region }}
                tags:
                  solution-id: "{{ .observed.composite.resource.spec.solutionId }}"
                  cost-center: "{{ .observed.composite.resource.spec.costCenter }}"
                  environment: "{{ .observed.composite.resource.spec.environment }}"
                  owner: "{{ .observed.composite.resource.spec.owner }}"
                  created-by: "crossplane"
                  ${{- range $key, $value := .observed.composite.resource.spec.tags }}
                  {{ $key }}: "{{ $value }}"
                  ${{- end }}
    # - step: create-resource-group
    #   functionRef:
    #     name: function-patch-and-transform
    #   input:
    #     apiVersion: pt.fn.crossplane.io/v1beta1
    #     kind: Resources
    #     resources:
    #       - name: resource-group
    #         base:
    #           apiVersion: azure.upbound.io/v1beta1
    #           kind: ResourceGroup
    #           metadata:
    #             name: ""
    #           spec:
    #             forProvider:
    #               location: westeurope
    #               tags:
    #                 provisioner: crossplane
    #         patches:
    #           - type: FromCompositeFieldPath
    #             fromFieldPath: spec.region
    #             toFieldPath: spec.forProvider.location
    #           - type: FromCompositeFieldPath
    #             fromFieldPath: spec.name
    #             toFieldPath: metadata.name
    #           - type: FromCompositeFieldPath
    #             fromFieldPath: spec.solutionId
    #             toFieldPath: spec.forProvider.tags["solution-id"]
    #             transforms:
    #               - type: string
    #                 string:
    #                   fmt: "%d"
    #           - type: FromCompositeFieldPath
    #             fromFieldPath: metadata.name
    #             toFieldPath: spec.forProvider.tags["created-by"]
    #             transforms:
    #               - type: string
    #                 string:
    #                   fmt: "crossplane"
